=================
 Unit testing
=================

.. contents :: :local:

Introduction
------------

Unit tests are automated tests created by developer to ensure that the add-on product is
intact in the current product configuration. Unit tests are regression tests and
are designed to catch broken functionality over the code evolution.

`Plone unit testing tutorial <http://plone.org/documentation/tutorial/richdocument/unit-testing>`_.

Running unit tests
-------------------

Since Plone 4, ``zc.testrunner`` is recommended to use to run the test suites.
You need to add it to your ``buildout.cfg`` to generate ``test`` command.

.. code-block:: cfg

    parts = 
       ...
       test
    
    [test]
    recipe = zc.recipe.testrunner
    defaults = ['--auto-color', '--auto-progress']
    eggs = 
        ${instance:eggs}

.. note ::

        On Plone 3 you can run tests with "bin/instance test"
        command, which corresponds "bin/test".             


Running tests for one package
conver
.. code-block:: console

    bin/test -s package.subpackage

Running tests for one test case

.. code-block:: console

    bin/test -s package.subpackage -t TestCaseClassName

Running tests for two test cases

.. code-block:: console

    bin/test -s package.subpackage -t TestClass1|TestClass2    

To drop in pdb debugger after each test failure

.. code-block:: console

    bin/test -s package.subpackage -D

To exclude tests

.. code-block:: console

    bin/test -s package.subpackage -t !test_name

To list tests that will be run

.. code-block:: console

    bin/test -s package.subpackage --list-tests

The following will run tests for *all* Plone and -ons - 
useful to check whether you have a good component set

.. code-block:: console

    bin/test

.. warning::

    Test runner does not give an error if you supply invalid package and test case name.
    Instead it just simply doesn't execute tests.

More information

* http://plone.org/documentation/manual/upgrade-guide/version/upgrading-plone-3-x-to-4.0/updating-add-on-products-for-plone-4.0/no-longer-bin-instance-test-use-zc.recipe.testrunner

AttributeError: 'module' object has no attribute 'test_suite'
=============================================================

If you get the above error message there are potential reasons

* Having both tests.py and tests folder

* Old version: Zope version X unit test framework was updated not to need 
  anymore explicit test_suite declaration in test module. 
  Instead, all classes subclasses TestCase are automatically picked.
  However, this change is backwards incompatible.
  http://wiki.zope.org/zope2/HowToRunZopeUnitTests 

Test coverage
-------------

Zope test running can show how much your code is covered by automatic tests.

* http://plone.org/documentation/kb/testing/code-coverage

Creating unit tests
--------------------

Pointers

* http://plone.org/documentation/kb/testing

* http://pypi.python.org/pypi/Products.PloneTestCase

* http://www.zope.org/Members/shh/ZopeTestCaseWiki/ApiReference

Base test class skeleton
------------------------

Example::

    # Zope imports
    from Testing import ZopeTestCase

    # Plone imports -> PloneTestCase load zcml layer and install product
    from Products.PloneTestCase import PloneTestCase 

    # For loading zcml          
    from Products.Five import zcml 

    ## Import all module that you want load zcml
    import Products.PloneFormGen
    import Products.Five
    import Products.GenericSetup
    import Products.CMFPlone
    import myapp.content

    ## Install all product requirement
    PloneTestCase.installProduct('PloneLanguageTool')
    ## ....
    PloneTestCase.installProduct('collective.dancing')
    ## Install a Python package registered via five:registerPackage 
    PloneTestCase.installPackage('myapp.content')

    ## load zcml
    zcml.load_config('meta.zcml' , Products.CMFPlone)
    zcml.load_config('meta.zcml' , Products.Five)
    zcml.load_config('meta.zcml' , Products.GenericSetup)
    zcml.load_config('configure.zcml' , Products.Five)
    zcml.load_config('configure.zcml',Products.Five)
    ## ....
    zcml.load_config('configure.zcml',Products.PloneFormGen)
    zcml.load_config('configure.zcml',myapp.content)

    # Setup Plone site
    PloneTestCase.setupPloneSite(products=['PloneLanguageTool', 'myapp.content'],extension_profiles=['myapp.content:default',])


    class MySiteTestCase(PloneTestCase.PloneTestCase):
        """Base class for all class with test cases"""
     
        def afterSetUp(self):
            """ some tasks after setup the site """


         

 

Posing as different users
---------------------------

There is a shortcut to priviledge you from all security checks::
        
      self.loginAsPortalOwner()
          
.. where self is the test case instance.

.. note ::

        This priviledges are effective only in the context
        where permissions are checked manually. They do
        not affect traversing related permissions: 
        looking up views or pages in unit test Python code.
        For that kind of testing, use functional testing.

Unit tests and themes
------------------------

If your test code modifies skin registries you need to force skin data reload.

Example (self = unit test)::

    self._refreshSkinData()

Running add-on installers and extensions profiles for unit tests
-----------------------------------------------------------------

By default, no add-on installers or extension profiles are installed.

You need to modify PloneTestCase.setupPloneSite() call in your
base unit tests.

Simple example::

    ptc.setupPloneSite(products=['namespace.yourproduct'])

Complex example::

    ptc.setupPloneSite(products=['harvinaiset.app', 'TickingMachine'], extension_profiles=["harvinaiset.app:tests","harvinaiset.app:default"])
    

Tested package not found warning
=================================

Installers may fail without interrupting the test run. Monitor Zope start up messages. If you get error like::

    Installing gomobiletheme.basic ... NOT FOUND

You might be missing this from your configure.zcml

.. code-block:: xml

    <five:registerPackage package="." initialize=".initialize" />

... or you have spelling error in your test setup code.

Load zcml for testing
---------------------

For loading fs zcml in test you can use Five API

::

   import <your fabulous module>
   from Products.Five import zcml
   zcml.load_config('configure.zcml', <your fabulous module>)


Setting log level in unit tests
-------------------------------

Many components use debug output level and unit testing default output level is info.
Import messages may go unnoticed during the unit test development.

Add this to your unit test code::

    def enableDebugLog(self):
        """ Enable context.plone_log() output from Python scripts """
        import sys, logging
        from Products.CMFPlone.log import logger
        logger.root.setLevel(logging.DEBUG)
        logger.root.addHandler(logging.StreamHandler(sys.stdout))

HTTP request
------------

Zope unit tests have faux HTTPRequest object set up.

You can access it::

    self.portal.REQUEST # Faux HTTPRequest object

Setting a real http request
===========================

::
 
    >>> from Testing import makerequest
    >>> self.app = makerequest.makerequest(Zope.app())
    >>> request=self.portal.REQUEST


Grabbing emails
---------------

To debug outgoing email traffic you can create a dummy mailhost.

.. note ::

        MailHost code has been changed in Plone 4. This instructions apply for Plone 3.
        
Example::

    from zope.component import getUtility, getMultiAdapter, getSiteManager
    from Products.MailHost.interfaces import IMailHost
    from Products.SecureMailHost.SecureMailHost import SecureMailHost
    from Products.CMFCore.utils import getToolByName

    
    class DummySecureMailHost(SecureMailHost):
        """Grab outgoing emails"""
        
        meta_type = 'Dummy secure Mail Host'
    
        def __init__(self, id):
            self.id = id
            
            # Use these two instance attributes to check what email has been sent
            self.sent = []        
            self.mto = None
    
        def _send(self, mfrom, mto, messageText, debug=False):
            self.sent.append(messageText)
            self.mto = mto
    
    
    ...
    
    def afterSetUp(self):
        self.loginAsPortalOwner()
        sm = getSiteManager(self.portal)
        sm.unregisterUtility(provided=IMailHost)
        self.dummyMailHost = DummySecureMailHost('dMailhost')
        sm.manage_changeProperties({'email_from_address': 'moo@isthemasteofuniverse.com'})
        sm.registerUtility(self.dummyMailHost, IMailHost)
    
        # Set mail host for tools which use getToolByName() look up
        self.MailHost = self.dummyMailHost
    
        # Make sure that registration tool uses mail host mock
        rtool = getToolByName(self.portal, 'portal_registration')
        rtool.MailHost = self.dummyMailHost
    
    ....
    
    def test_xxx(self):
        # Reset outgoing emails
        self.dummyMailHost.sent = []
    
        # Do a workflow state change which should trigger content rule
        # sending out email                        
        self.workflow.doActionFor(member, "approve_by_sits")        
        review_state = self.workflow.getInfoFor(member, 'review_state')
        self.assertEqual(review_state, "approved_by_sits")
                                
        # Check that email has been sent
        self.assertEqual(len(self.dummyMailHost.sent), 1)                      

Unit testing and Zope component architecture
--------------------------------------------

If you are dealing with low level Zope component architecture in your unit tests,
there are some things to note.
Global site manager doesn't behave properly in the unit tests.

See discussion: http://n2.nabble.com/PTC-global-components-bug--tp3413057p3413057.html

ZCML
----

Below are examples how to run special ZCML snippets for your unit tests.

.. code-block:: python

    import unittest
    from base import PaymentProcessorTestCase
    from Products.Five import zcml
    from zope.configuration.exceptions import ConfigurationError
    from getpaid.paymentprocessors.registry import paymentProcessorRegistry
    
    configure_zcml = '''
    <configure
        xmlns="http://namespaces.zope.org/zope"
        xmlns:five="http://namespaces.zope.org/five"
        xmlns:paymentprocessors="http://namespaces.plonegetpaid.com/paymentprocessors"
        i18n_domain="foo">
    
    
        <paymentprocessors:registerProcessor
           name="dummy"
           processor="getpaid.paymentprocessors.tests.dummies.DummyProcessor"
           selection_view="getpaid.paymentprocessors.tests.dummies.DummyButton"
           thank_you_view="getpaid.paymentprocessors.tests.dummies.DummyThankYou"
           />
    
    </configure>'''
    
    
    bad_processor_zcml = '''
    <configure
        xmlns="http://namespaces.zope.org/zope"
        xmlns:five="http://namespaces.zope.org/five"
        xmlns:paymentprocessors="http://namespaces.plonegetpaid.com/paymentprocessors"
        i18n_domain="foo">
    
    
        <paymentprocessors:registerProcessor
           name="dummy"
           selection_view="getpaid.paymentprocessors.tests.dummies.DummyButton"
           thank_you_view="getpaid.paymentprocessors.tests.dummies.DummyThankYou"
           />
    
    
    </configure>'''
    
    
    
    
    class TestZCML(PaymentProcessorTestCase):
        """ Test ZCML directives """
    
    
        def test_register(self):
            """ Check that ZCML entry gets added to our processor registry """
            zcml.load_string(configure_zcml)
    
    
            # See that our processor got registered
            self.assertEqual(len(papaymentProcessorRegistryistry.items()), 1)
    
    
        def test_bad_processor(self):
            """ Check that ZCML entry which has bad processor declaration is caught """
    
    
            try:
                zcml.load_string(bad_processor_zcml)
                raise AssertionError("Should not be never reached")
            except ConfigurationError, e:
                pass
