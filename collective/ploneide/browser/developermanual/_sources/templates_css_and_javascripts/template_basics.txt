=======================
 Page templates
=======================

.. admonition:: Description

	Plone uses TAL template language for its templates.
	This document contains references to this template
	language and generally available templates, macros
	and views you can use to build your Plone add-on
	product.

.. contents :: :local:

Introduction
-------------

Plone uses `TAL template language <http://docs.zope.org/zope2/zope2book/AppendixC.html>`_. 

Templated Plone page consists of

* Master template

* Slots

* :doc:`Viewlet managers </views/viewlets>` containing :doc:`viewlets </views/viewlets>`

Templates can be associated with BrowserView code class (new style) or standalone (old style)

* View page templates (BrowserView, new style)

        *  These templates live under browser/folder in add-on product. 
  
        * You can override them by <browser:page> ZCML directive.
        
        * You can customize them through-the-web using ``portal_view_customization`` tool in ZMI

* Standalone page templates (old style) 

        * They live under plone_skins structure 
        
        * You can override them by :doc:`register a new plone_skins layer </templates_css_and_javascripts/skin_layers>`. 
        
        * You can customize them through-the-web using ``portal_skins`` / ``custom`` folder in ZMI. Just copy
          the orignal template through-the-web to ``custom`` folder and edit it.

.. note ::

        Rationale moving away from standalone page templates is that the page template code becomes
        easily cluttered with inline Python code. This makes templates hard to customize or override.
        New style templates provide better separation with view logic (Python code) and 
        HTML generation (page template)


See `browser:page <http://apidoc.zope.org/++apidoc++/ZCML/http_co__sl__sl_namespaces.zope.org_sl_browser/page/index.html>`_

Main template
-------------

The master page template in Plone is called ``main_template.pt`` and it is provided by `Products.CMFPlone package <http://svn.plone.org/svn/plone/Plone/trunk/Products/CMFPlone/skins/plone_templates/main_template.pt>`_.

This template provides visual frame for Plone themes. The template is old style page template living in ``plone_templates`` folder under ``plone_skins``.

Plone template element map
--------------------------

Plone 4 ships with *Sunburst* theme. Its viewlets and viewlets managers are described `here <http://plone.org/documentation/manual/theme-reference/elements/elementsindexsunburst4>`_. 

.. note ::

        Plone 3 viewlets differ.

TAL
---

`TAL <http://wiki.zope.org/ZPT/TALSpecification14>`_ is template language used Plone.
TAL is XML based language, which puts programming logic to XML attributes.

* `TAL Guide <http://www.owlfish.com/software/simpleTAL/tal-guide.html>`_

Escaped and unescaped content
=============================

By default, all TAL output is escaped for the security reasons.

.. code-block:: python

	view.text = "<b>Test</b>"

.. code-block:: html

	<div tal:content="view/text" />
	
Will output escaped HTML source code::

	&lt;b&gt;Testlt;/b&gt;
	
Unescaped content can be outputted using tal:replace attribute and structure.

.. code-block:: html

	<div tal:replace="structure view/text" />
	
Will output unescaped HTML source code::

	<b>Test</b>

METAL
------

METAL is TAL extension to provide macros and slots to the template language.

Using METAL macros is no longer recommended, since they couple 
programming logic too tightly with the template language.
You should use views instead.

Read more about in `TAL Guide <http://www.owlfish.com/software/simpleTAL/tal-guide.html>`_.

TALES expressions
----------------------

TALES expressions are condition clauses used in TAL templates and various other parts of Plone

* CSS, Javascript and KSS registries whether to include a particular file

* Action conditions whether to show or hide action link

* Workflow security guards whether to allow workflow state transition

* etc.

Read more about expressions in `TAL Guide <http://www.owlfish.com/software/simpleTAL/tal-guide.html>`_.

See :doc:`Expressions chapter </functionality/expressions>` for more information.

Omitting tags
-----------------

Sometimes you need to create XML control structures which should not end up to the
output page.

You can use tal:omit-tag=""

.. code-block:: xml

	<div tal:omit-tag="">
  		Only the content of the tag is rendered, not the tag itself.
	</div>

Images
------

See :doc:`how to use images in templates </images/templates>`.

Overriding templates for exising Plone views
----------------------------------------------

#. New style templates can be overridden by overriding the view using the template.

#. Old stype templates can be overridden by register a new skins layer in plone_skins

View page template
==================

* http://lionfacelemonface.wordpress.com/2009/03/02/i-used-macros-in-my-browser-views-and-saved-a-bunch-of-money-on-my-car-insurance/

Old style page template
=======================

* Create a new layer in portal_skins

* Templates are resolved by their name and portal_skins properties
  sets the priority which add-on product is looked for the first

* Reorder layers for the active theme so that your layer thakes
  priority (see *Properties* tab on portal_skins)

Portlet slots
-------------

By default, Plone main_template has slots for left and right portlets.
If you have a view where you don't explicitly want to render portlets you can do

.. code-block:: html

        <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
                xmlns:tal="http://xml.zope.org/namespaces/tal"
                xmlns:metal="http://xml.zope.org/namespaces/metal"
                xmlns:i18n="http://xml.zope.org/namespaces/i18n"
                lang="en"
                metal:use-macro="here/main_template/macros/master"
                i18n:domain="plone">
        
                <head>
                        <metal:block fill-slot="column_one_slot" />
                        <metal:block fill-slot="column_two_slot" />
                </head>

Head slots
----------------

You can easily include per-template CSS and Javscripts in <head> using 
extra slots defined in Plone's ``main_template.pt``.

Note that these media files do not participate in :doc:`portal_css </templates_css_and_javascripts/css>` or
:doc:`portal_javascript </templates_css_and_javascripts/javascript>` resource compression. 

Extra slots are

.. code-block:: xml

    <tal:comment replace="nothing"> A slot where you can insert elements in the header from a template </tal:comment>
    <metal:headslot define-slot="head_slot" />

    <tal:comment replace="nothing"> A slot where you can insert CSS in the header from a template </tal:comment>
    <metal:styleslot define-slot="style_slot" />

    <tal:comment replace="nothing"> This is deprecated, please use style_slot instead. </tal:comment>
    <metal:cssslot define-slot="css_slot" />

    <tal:comment replace="nothing"> A slot where you can insert javascript in the header from a template </tal:comment>
    <metal:javascriptslot define-slot="javascript_head_slot" />

Example use

.. code-block:: html

        <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
              lang="en"
              metal:use-macro="here/main_template/macros/master"
              i18n:domain="sits">
        
              <metal:slot fill-slot="css_slot">
                      <style media="all" type="text/css">
                        
                        .schema-browser {
                                border-collapse: collapse;
                        }
                        
                        .schema-browser td,
                        .schema-browser th {
                                vertical-align: top;
                                border: 1px solid #aaa;
                                padidng: 0.5em;
                                text-align: left;
                        }
                        
                        .default {
                                color: green;
                        }
                        
                        .mandatory {
                                color: red;
                        }
                      </style>
              </metal:slot>
        
        <body>
                <metal:main fill-slot="main">
                        
                        <p>
                                Protocols marked with question marks can be required or not 
                                depending of the current state of the patient.
                                For example, priodisability field depends on other set fields of the patient.
                        </p>


Edit frame
---------------

By default, Plone draws green edit frame around the content if you can 
edit it. You might want to disable this behavior for particular views.

Hiding the edit frame
===========================
If you'd like to hide the (green) editing frame place the following code to your Zope 2 like page template::

 <metal:block fill-slot="top_slot"
                tal:define="dummy python:request.set('disable_border',1)" />

Examples of this usage

* Contact info page - http://svn.plone.org/svn/plone/CMFPlone/tags/3.1.4/skins/plone_templates/contact-info.cpt

* Recently modified page - http://svn.plone.org/svn/plone/CMFPlone/tags/3.1.4/skins/plone_templates/recently_modified.pt

Special style on individual pages
-----------------------------------

To override page layout partially for individual pages you
can use marker interface to register special overriding viewlets.

More information

* :doc:`Viewlets </views/viewlets>`

* http://starzel.de/blog/how-to-get-a-different-look-for-some-pages-of-a-plone-site






