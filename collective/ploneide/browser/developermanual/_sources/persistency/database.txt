=============
ZODB Database
=============

.. admonition:: Description

    Plone uses the ZODB object database to store its data.  The ZODB can act
    independently in-process, clustered over network or over another database
    engine, like SQL.

.. contents:: :local:

Introduction
============

Plone uses the ZODB database.  The ZODB happily stores any Python object with
any attributes |---| there is no need to write "database schemas" as there is
with SQL-based systems.

Subclasses of ``persistent.Persistent`` will have all their attributes
written to the database.  Lists and dictionaries will be automatically
converted to persistent versions.

This chapter is about the basics of the ZODB, working with the ZODB database
directly, like tuning database settings.

Object database constraints
===========================

The ZODB is an object database.  It makes very easy to store different kinds of
contentish data in a graph, supporting subclassing (something which SQL often
does poorly).

Since the database stores objects, and the objects are defined in Python code,
you always need the corresponding Python source code to instantiate the objects
stored inside the ZODB.  This might feel awkward at first, but you need to have
MySQL running to read what's inside MySQL files stored on your disk and so on ...

.. warning::

    The ZODB database is not usable without the Python source code used to
    create the data. The data is not readable using any SQL-based tools, and
    there exist little tools to deal with the raw data. The way to access Plone
    data is running Plone itself and performing queries through it.

.. warning::

    Since correct source code is needed to read ZODB data, this poses a problem
    for versioning. Even if you use the correct add-on product with proper
    source code, if the source code version is wrong, it might not work.  Data
    model attributes might be added, modified or deleted between source code
    revisions, making data operations on the existing database fail by raising
    Python exceptions (``AttributeError``, ``KeyError``).

To work around the ZODB interoperatibility problems, products like
*ore.contentmirror* exist to duplicate Plone content data to read-only SQL
database.

Query and searching
--------------------

ZODB does not provide query services as is
i.e. there is no SELECT statement.

Plone provides :doc:`cataloging </searching_and_indexing/catalog>`
service for this purpose.

This gives some benefits

* You define yourself how data is indexed

* The backend to perform queries is flexible - you
  can plug-in custom indexes

* portal_catalog default catalog is used to all content items
  to provide basic CMS functionality easily

* You can have optimized catalogs for specialized data (e.g. reference look-ups
  using reference_catalog)  
  
Data model
==========

There is no hardwired way for desceribe
data in ZODB database. 

There are currently three primary ways to define data models in Plone

* Using Archetypes content type subsystem (all Plone 3 content)

* Using zope.schema package (modern way)

* Not defining the model, but relying 

Read about :doc:`zope.schema </models/schemas>`
how to define a model for the data to be stored 
in ZODB database.

Browsing
========

You can explore ZODB outside Plone, assuming you have related Python code available 

* http://robertoallende.com/en/zodbbrowser-released

ZODB versions
==============

Plone uses ZODB database. The default ZODB version with Plone 3.x is ZODB 3.7.x. 
ZODB 3.8.x is not officially supported, but has been reported to work to work
with Plone 3. ZODB 3.9.x is to be used with Plone 4.

* `ZODB overview <http://www.zodb.org/documentation/articles/ZODB-overview.html>`_

* `ZODB programming guide <http://www.zodb.org/documentation/guide/index.html>`_

* http://www.ibm.com/developerworks/aix/library/au-zodb/

ZODB tips and tricks
====================

Please see

* http://plone.org/events/regional/nola05/collateral/Chris%20McDonough-ZODB%20Tips%20and%20Tricks.pdf

Packing the database offline
=============================

`See this blog post <http://blog.twinapex.fi/2009/09/01/packing-and-copying-data-fs-from-production-server-for-local-development/>`_.

Example how to pack a copy of Data.fs in offline using Python snippet::

    import time
    import ZODB.FileStorage
    import ZODB.serialize

    storage=ZODB.FileStorage.FileStorage('/tmp/Data.fs.copy')
    storage.pack(time.time(),ZODB.serialize.referencesf)

As this depends on ZODB egg, the easiest way to run the snippet is to ``zopepy``
script from your ``buildout/bin`` folder::

    bin/zopepy pack.py 
    
For more information, see :doc:`command-line scripts </misc/commandline>`.
        
Visualizing database object graphs
====================================

* http://blog.hannosch.eu/2009/05/visualizing-persistent-structure-of.html

* http://david.wglick.org/2009/visualizing-the-zodb-with-graphviz/

Cache size
===========

* `Understanding ZODB cache size option <https://mail.zope.org/pipermail/zodb-dev/2010-March/013199.html>`_

Integrity checks
=================

Especially when you back-up a Data.fs file, it is useful to run integrity checks for the transferred files.

ZODB provides scripts ``fstest`` and ``fsrefs`` to check if Data.fs data is intact
and there are no problems due to low level disk corruption or bit flip.

* http://wiki.zope.org/ZODB/FileStorageBackup

.. note ::

        It is recommended best practice to run integrity against your Data.fs regularly.
        This is the only way to detect corruption which would otherwise go unnoticed
        for a long time. 

.. |---| unicode:: U+02014 .. em dash
