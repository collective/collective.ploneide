=====================
 Image-like content
=====================

.. admonition:: Description

        How to programmatically manipulate images on your Plone site.

.. contents :: :local:

Introduction
------------

Plone provides image upload in two ways

* As content type, will be visible in the sitemap. This is the default "Image" content,
  but you can add your custom content type.
  
  
* As a field. Then the image is directly associated with one content object. 
  Use Archetypes.fields.ImageField.
  
 
Custom image content type 
--------------------------

If you want to have your custom content type behave like
Plone stock Image content type.

* Inherit content class from Products.ATContentType.content.image.ATImage
  and use schema correspondingly

* Make your GenericSetup types XML to look like `Image.xml <http://svn.plone.org/svn/plone/Plone/branches/3.3/Products/CMFPlone/profiles/default/types/Image.xml>`_.

* Do not set workflow for your type in *profiles/default/workflows.xml*

.. code-block:: xml

	<?xml version="1.0"?>
	<object name="portal_workflow" meta_type="Plone Workflow Tool">

	 <bindings>
	  <type type_id="YourImageType"/>
	 </bindings>
	</object>
	
Image scales (Plone 4)
------------------------

* http://plone.org/products/plone.app.imaging	

Image scales (Plone 3)
-----------------------

When the image is  uploaded, both field or content, Plone creates default scaled down versions
from it.

These are configured as ImageField *sizes* parameter. See ImageField class notes here:

*  http://svn.plone.org/svn/archetypes/Products.Archetypes/trunk/Products/Archetypes/Field.py

Default image scales for Image content are configured in

* http://svn.plone.org/svn/collective/Products.ATContentTypes/trunk/Products/ATContentTypes/content/image.py

Configuration::

               sizes= {'large'   : (768, 768),
                       'preview' : (400, 400),
                       'mini'    : (200, 200),
                       'thumb'   : (128, 128),
                       'tile'    :  (64, 64),
                       'icon'    :  (32, 32),
                       'listing' :  (16, 16),
                      },

More info

* http://plone.293351.n2.nabble.com/Register-browser-view-for-image-scales-tp5626267p5626267.html
                      
getScale()
==========

ImageField provides function getScale() to get the scaled version of the image based
on the *sizes* configuration key.

See example in __bobo_traverse__

* http://svn.plone.org/svn/collective/Products.ATContentTypes/trunk/Products/ATContentTypes/content/image.py                       

Accessing image
---------------

ImageField is mapped to traversable attribute of your content type.
If your content object has field "imageOne" and content is in URL::

        http://yoursite/content
        
Image can be directly downloaded from::

        http://yoursite/content/imageOne
        

Scaled versions for Image content (ATImage)
============================================

If you want different scales you can add image_XXX prefix where XXX is the corresponding scale name::

        http://yoursite/content/imageOne/image_preview

In **Plone 4** this behavior comes from `plone.app.imaging <http://plone.org/products/plone.app.imaging>`_
package monkey-patch.        
        
In **Plone 3** This hook is defined in __bobo_traverse__ in ATImage class        

* http://svn.plone.org/svn/collective/Products.ATContentTypes/trunk/Products/ATContentTypes/content/image.py               

        
portal_catalog and images
--------------------------

Do not index image object themselves, as putting in image data to porta_catalog brain
would grealy increase its site and make brain look-up slow.

Instead, index only image paths using :doc:`getPhysicalPath() </serving/traversing>`.
When you need to display image using metadata columns, you can generate the image 
URL manually. Then, image object will be waken up when the browser makes
a HTTP request for the image.


Custom image scales and recreating scale data
---------------------------------------------

For Plone 4
=============

`plone.app.imaging <http://plone.org/products/plone.app.imaging>`_ allows
you to configure available image scales in portal_properties ->
imaging_properties.

You can update these through-the-web or
using :doc:`GenericSetup profile </components/genericsetup>`.

propertiestool.xml

.. code-block:: xml

        <?xml version="1.0"?>
        <object name="portal_properties" meta_type="Plone Properties Tool">
         <object name="imaging_properties" meta_type="Plone Property Sheet">
          <property name="title">Image handling properties</property>
          <property name="allowed_sizes" type="lines">
           <element value="large 768:768"/>
           <element value="preview 400:400"/>
           <element value="mini 200:200"/>
           <element value="thumb 128:128"/>
           <element value="tile 64:64"/>
           <element value="icon 32:32"/>
           <element value="listing 16:16"/>
              
           <!-- Include our custom sizes here -->
           <element value="custom1 290:290"/>
           <element value="custom2 210:210"/>
           <element value="custom_210_189 210:189"/>
           <element value="custom_290_258 290:256"/>
           
          </property>
         </object>
        </object>
        
.. note ::

        For Plone 4, after adding new scales no batch processing
        of existing images are needed and new scales are created
        on-demand when the images are viewed for the first time.        

For Plone 3
==============

Below is an example how to make custom image scales available on your Plone site.

* Monkey-patch ATImages to have new scale versions available

* Have migration code which will run all through all ATImages on the site
  and recreate their scale versions, thus populating image scale data
  for new scale versions also
  
* The new sizes are automatically effected to rich text editor image sizes
  options (active WYSIWYG editor on Plone site)
  
images.py::
        
        """
        
            Add alternative image sizes to default ATImage scales.
            
            NOTE: This does not effect available user interface options in the visual editor etc.
        
        """
        
        import transaction
        from zope.app.component.hooks import setHooks, setSite, getSite
        
        from Products.Five.browser import BrowserView
        
        from Products.ATContentTypes.content.image import ATImage
        from Products.ATContentTypes.interface.image import IATImage
        
        # Monkey patch our new image sizes to be available in ATImage default scales.
        # This also will affect WYSIWYG text editor "image sizes" option.
        ATImage.schema["image"].sizes.update({
            "custom1" : (290, 290),
            "custom2" : (210, 210),
            "custom_210_189" : (210, 189),
            "custom_290_258" : (290, 258),
        })
        
        class RescaleImages(BrowserView):
            """ Migration view to recreate all image scale versions on all Image content types on the site.
            
            To trigger this migration code, enter the view URL manually to the browser address bar::
                
                    http://yourhost/site/@@rescale_images
                    
            We assume you run Zope in foreground mode and monitor the console for the messages.
            
            This code is designed to work with sites with plenty of images.
            Tested with > 5000 images.
            
            Note that you need to run this rescale code only once to migrate the existing image conte.t 
            New images will have custom scale versions available when the images are created. 
            """
            
            def __call__(self):
                """ View processing entry point.
                """
                        
                portal = getSite()
                
                # Iterate through all Image content items on the site
                all_images = portal.portal_catalog(show_inactive=True, language="ALL", object_provides=IATImage.__identifier__)
                
                done = 0
                
                for brain in all_images:
                    
                    done += 1
                    
                    content = brain.getObject()
                    
                    print "(%d / %d) creating scales for image: %s" % (done, len(all_images), "/".join(content.getPhysicalPath()))
                    
                    # This will trigger ImageField scale rebuild
                    
                    # Access schema in Plone 4 / archetypes.schemaextender compatible way
                    schema = content.Schema()
                    
                    if "image" in schema:
                        schema["image"].createScales(content)
                    else:
                        print "Had bad ATImage schema:" + content.absolute_url()
                        
                    # Since this is HUGE operation (think resizing 2 GB images)
                    # it is not nice idea to buffer the transaction in the memory
                    # (Zope default behavior).
                    # Using subtransactions we hint Zope when it would be a good time to flush the 
                    # changes to the disk
                    # http://www.zope.org/Members/mcdonc/HowTos/transaction
                    if done % 10 == 0:
                        # Commit subtransaction for every 10th processed item
                        transaction.get().commit() 
        
                        
                # Note that when code exists the view
                # there will huuuge delay before the message below is returned to the browser.
                # This is because Zope updates Data.fs.
                    
                # Make simple HTTP 200 answer
                return "Recreated image scales for %d images" % len(all_images)
                                        


                    
configure.zcml 

.. code-block:: xml

        <configure
            xmlns="http://namespaces.zope.org/zope"
            xmlns:five="http://namespaces.zope.org/five"
            xmlns:browser="http://namespaces.zope.org/browser"
            >          
                        
                  <browser:page
                        for="*"
                        name="rescale_images"
                        permission="cmf.ManagePortal"
                        class=".images.RescaleImages"
                        />
        
        
        </configure>



