====================
 Dynamic views
====================

.. contents :: :local:

.. admonition:: Description

	How to change the active view of a Plone content item programmatically

Introduction
------------

Dynamic views are views which the content editor can choose for his/her content
from *Display...* drop down menu in the green edit frame.

By default, Plone comes with dynamic views for

* Folder listing

* Summary

* Photo album

* etc.


Permission for changing the view template of an item
-----------------------------------------------------

An user needs the "Modify view template" permission to use the dynamic
view dropdown. If you want to restrict this ability, grant/revoke this
permission adequately.

This can be useful for some content-types like Dexterity ones, where
dynamic views are enabled by default and the easiest way to disable
them is using this permission.

Default dynamic views
---------------------

Plone supports few dynamic views for folders out of the box

* Summary view (folder_summary_view)

* Tabular view (folder_tabular_view)

* Album view (atct_album_view)

* Listing (folder_listing)

* Full view (folder_full_view) 

These are defined in :doc:`portal_types information </content/types>` for *Folder* content type
and mapped to *Display* menu all over in ZCML using ``browser:menuItem`` as described below.

More info

* :doc:`Overriding views </views/browserviews>` 

Creating a dynamic view
------------------------

Dynamic view can be skins template or BrowserView. Dynamic view machinery
only cares about the path name coming after the context object.

Register a dynamic view menu item
==================================

Your content type must support dynamic views

* Content type subclasses Products.CMFDynamicViewFTI.browserdefault.BrowserDefaultMixin

You need to register dynamic view menu item with the corresponding view in configure.zcml:

.. code-block:: xml

  <browser:menuItem
        for="Products.ATContentTypes.interface.IATFolder"
        menu="plone_displayviews"
        title="Product listing"
        action="@@product_listing"
        description="List folder contents as product summary view"
        />
        
.. note ::

        Products.ATContentTypes uses non-standard name for "interfaces" package.
        It is "interface" there, when all other packages use "interfaces".         

The view must be listed in portal_types for the content type. In this case
we should enable it for Archetypes folder using the following GenericSetup XML
*profiles/default/types/Folder.xml*.

Note that you don't need to copy the whole Folder.xml / Topic.xml from
Products/CMFPlone/profiles/default/types, but including the changed fields
(view_methods) in XML code is enough.

You can also change this through portal_types in ZMI.    
    
.. note::

        view_methods must not have @@Â view signature in the method name.

.. code-block:: xml

    <?xml version="1.0"?>
    <object name="Folder"
       meta_type="Factory-based Type Information with dynamic views"
       i18n:domain="plone" xmlns:i18n="http://xml.zope.org/namespaces/i18n">
         <property name="view_methods">
          <element value="folder_summary_view"/>
          <element value="folder_tabular_view"/>
          <element value="atct_album_view"/>
          <element value="folder_listing"/>

          <!-- We retrofit these new views for Folders in portal_types info -->
          <element value="product_listing"/>

         </property>
    </object>

Also if you want to Collections have this listing you need to add
the following *profiles/default/types/Topic.xml*.

.. code-block:: xml

    <?xml version="1.0"?>
    <object name="Topic"
       meta_type="Factory-based Type Information with dynamic views"
       i18n:domain="plone" xmlns:i18n="http://xml.zope.org/namespaces/i18n">
     <property name="view_methods">
      <element value="folder_listing"/>
      <element value="folder_summary_view"/>
      <element value="folder_tabular_view"/>
      <element value="atct_album_view"/>
      <element value="atct_topic_view"/>

      <!-- We retrofit these new views for Folders in portal_types info -->
      <element value="product_listing"/>

     </property>
    </object>
    


Checking that your view is available
-------------------------------------

Products.CMFDynamicViewFTI.browserdefault.BrowserDefaultMixin.getAvailableLayouts() returns
the list of known layouts like following::

    [('folder_summary_view', 'Summary view'),
    ('folder_tabular_view', 'Tabular view'),
    ('atct_album_view', 'Thumbnail view'),
    ('folder_listing', 'Standard view'),
    ('product_listing', u'Product listing')]


.. code-block:: python

    layout_ids = [ id for id, title in self.portal.folder.getAvailableLayouts() ]
    self.assertTrue("product_list" in layout_ids)

Getting active layout
---------------------

.. note::

        Need code example.

Changing default view programmatically
--------------------------------------

.. code-block:: python

    self.portal.folder.setLayout("product_listing")

Default page
------------

Default page is the **content** chosen to display when the visitor arrives
to URL without any subpages or views selected.

This is useful if you are doing folder listing manually
and you want to filter out the default view.

default_page helper view can be used to manipulate default pages.

Getting default page

.. code-block:: python

    # Filter out default content
    container = self.getListingContainer()
    default_page_helper = getMultiAdapter((container, self.request), name='default_page')

    # Return content object which is the default page or None if not set
    default_page = default_page_helper.getDefaultPage(container)
    
Another example how to use this::

    from Products.CMFCore.interfaces import IFolderish

    def hasTabs(self):
        """
        Determine whether the page itself, or default page, in the case of folders, has setting showTabs set true.
        
        Show tab setting defined in dynamicpage.py.
        """

        
        page = self.context
        
        try:
            if IFolderish.providedBy(self.context):
                folder = self.context
                default_page_helper = getMultiAdapter((folder, self.request), name='default_page')
                page_name = default_page_helper.getDefaultPage(folder)
                page = folder[page_name]
        except:
            pass
                
        tabs = getattr(page, "showTabs", False)
                
        return tabs
            

Setting default page can be done as simple as setting default_page attribute
of the folder to be the id of the default page:

.. code-block:: python

    folder.default_page = "my_content_id"

More information can be found in

* https://svn.plone.org/svn/plone/plone.app.layout/trunk/plone/app/layout/globals/context.py

* https://svn.plone.org/svn/plone/plone.app.layout/trunk/plone/app/layout/navigation/defaultpage.py

Setting view using marker interfaces
--------------------------------------

If you need to have a view for few individual content items only it is best
to do using marker interfaces. 

* Register a view against a marker interface

* Assign this marker interface to a content item using Zope Management Interface

For more info

* http://www.netsight.co.uk/blog/2010/5/21/setting-a-default-view-of-a-folder-in-plone

* ::doc::`marker interfaces </components/interfaces>`

Default Folder dynamic view
----------------------------

This is what Plone Folder content views out of the box

* ``Products.CMFPlone/skins/plone_content/folder_summary_view.pt``
  (a non-view based old style Zope 2 page template)
  
Migration script from default view to another
----------------------------------------------

The below is a script snippet which allows you to change all default views
of folder to another type. You can execute script through ZMI as Python Script.

Script code::

        from StringIO import StringIO
        
        buf = StringIO()
        orignal='fancy_zoom_view'
        target='atct_album_view'
        for brain in context.portal_catalog(portal_type="Folder"):
                obj = brain.getObject()
                if getattr(obj, "layout", None) == orignal:
                        print >> buf, "Updated:" + obj.absolute_url()
                        obj.setLayout(target)
        return buf.getvalue()

This will allow you to migrate to ``collective.fancyzoom`` to Plone 4 default album view / Products.PipBox.

Method aliases
-----------------

Method aliases allow you to redirect basic actions (view, edit) to content type specific view.
Aliases are configured in portal_types.

Other resources
----------------

* http://blog.jphoude.qc.ca/2008/09/14/plone-changing-title-zope3-views/

* http://plone.org/documentation/how-to/how-to-create-and-set-a-custom-homepage-template-using-generic-setup

* `CMFDynamicView plone.org product page <http://plone.org/products/cmfdynamicviewfti/>`_
