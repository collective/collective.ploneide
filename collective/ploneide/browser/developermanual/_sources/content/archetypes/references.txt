=========================
 References
=========================

.. admonition:: Description 

        Inter-content references in Plone are done using reference_catalog 
        
.. contents:: :local:


Introduction
--------------

Plone uses a persistent tool ``reference_catalog`` to store (Archetypes) object references.
It is used by the out of the box "Related items" and you can use it in your
own content types with ReferenceField.

reference_catalog references can be bidirectional.

reference_catalog acts like :doc:`portal_catalog </searching_and_indexing/catalog>`_,
but just uses different indexes and metadata.

reference_catalog is defined in `ReferenceEngine.py <http://svn.plone.org/svn/archetypes/Products.Archetypes/trunk/Products/Archetypes/ReferenceEngine.py>`_.

Using references
-----------------

Here is an example how to use reference field to make
*programme* -> *researcher* references and reverse look-up for them.

You use ``getReferences()`` and ``getBackReferences()`` method
to look up relationships.

Example::

        from Products.CMFCore.utils import getToolByName
        
        from Products.Archetypes.config import REFERENCE_CATALOG
        
        def getResearcherProgrammes(researcher):
            """
            Look all Programme contents which refer to this researcher. 
            
            
            Relationship Programme <-> Researcher is defined in Programme as::
            
              atapi.ReferenceField(
                name='researchers',
                widget=ReferenceBrowserWidget(
                    label="Researchers",
                    description="Researchers involved in this project",
                    base_query={'object_provides': IResearcher.__identifier__ },
                    allow_browse=0,
                    show_results_without_query=1,
                ),
                multiValued=1,
                relationship="researchers_in_theme"
              ),
        
            
            @param researcher: Content item on the site
            
            """
        
            # Do acquisition look-up
            reference_catalog = getToolByName(researcher, REFERENCE_CATALOG)
            
            # relationship: field name used
            # Plone 4.1: objects=True argument to fetch full objects, not just index brains        
            references = reference_catalog.getBackReferences(researcher, relationship="researchers_in_theme")
            # Resolve Reference objects to full objects
            # Return a generator method which will yield all full objects
            return [ ref.getSourceObject() for ref in references ] 
            
    
