===========
Deleting
===========

.. admonition:: Description

        Deleting content items in Plone programmatically.
        How link integrity checks works and how to avoid it.

.. contents :: :local:

Introduction
------------

This document tells how to programmatically delete objects in Plone.

Deleting content by id
----------------------

Deleting content objects is done by IObjectManager.

`IObjectManager definition <http://svn.zope.org/Zope/trunk/src/OFS/interfaces.py?rev=96262&view=auto>`_.

Example::

    # manage_delObjects takes list of ids as an argument
    folder.manage_delObjects(["list", "of", "ids", "to", "delete"])

Or::

    parent = context.aq_parent
    parent.manage_delObjects([context.getId()])

Permissions
=============

The user must have Zope 2 *Delete objects* permission on the *content item* being 
deleted. This is checked in ``Products.CMFPlone.PloneFolder.manage_delObjects()``.

Otherwise Unauthorized exception is risen.

Example how to check for this permission::

        from Products.CMFCore import permissions

        hospital = self.portal.country.hospital
        item = hospital.patient1
      
        mt = getToolByName(self.portal, 'portal_membership')
        if mt.checkPermission(permissions.DeleteObjects, item):
            # Can delete
            raise AssertionError("Oooops. Deletion allowed")
        else:
            pass

Bypassing permissios
=========================

This is handy if you work e.g. in a :doc:`debug shell </misc/commandline>`
and you are deleting badly behaving objects.

.. code-block:: python

        from AccessControl.SecurityManagement import newSecurityManager
        admin=app.acl_users.getUserById("admin")
        app.folder_sits.sitsngta.manage_delObjects("examples")
        # Try harder:
        # app.folder_sits.sitsngta._delObject("examples", suppress_events=True)
        import transaction ; transaction.commit()

Deleting all content in a folder
--------------------------------

Little tricky. An example:

.. code-block:: python

	ids = folder.objectIds() # Plone 3 or older
        ids = folder.keys()      # Plone 4 or newer
	
    if len(ids) > 0:
        # manage_delObject will mutate the list
        # so we cannot give it tuple returned by objectIds()
        ids = list(ids)
        folder.manage_delObjects(ids)

Bypassing link integrity check
-------------------------------

If link integrity check is on in the site setup, you cannot
delete objects which themselves are link targets or their children 
are link targets.

Instead, a LinkIntegrityException is raised. The LinkIntegrityException
constains information about objects referring to the content
which is not allowed to delete.

``plone.app.linkintegrity.browser.remote`` module contains
code which allows you to delete the object in any case. 
It catches the exception, modifies the HTTP request
to contain a marker interface allowing delete to happen
and then replays the transaction.

In the case the link integrity check fails for manage_delObjects(),
you will be shown a confirmation dialog. The orignal request payload
gots pickled and is stored in HTML form as an encoded.

When the user presses confirm, the orignal request gets unpickled
from HTTP POST payload. Then the view modifies Zope publisher 
so that it will play the orignal unpickled HTTP POST with the marker interface
"Do not care about link integrity breaches" turned on.
    
Fail safe deleting
-------------------

Sometimes object delete might not be possible, because deletion dispatches
events which might raise exception due to bad broken objects or badly behaving code.

`OFS.ObjectManager <http://svn.zope.org/Zope/trunk/src/OFS/ObjectManager.py?rev=115507&view=auto>`_ which is base class for Zope folders, provides internal method to delete 
objects from folder without firing any events::

        # Delete object with id "broken-folder" without firing any delete events
        site._delObject("broken-folder", suppress_events=True)
        
The best way to clean up bad objects on your site is via :doc:`command line script </misc/commandline>` in which case remember to commit the transaction
after removing the broken objects.

Purging site from old content
----------------------------------------

This ZMI script allows you to find content items of certain type and delete if they are created too long ago.

::

        # Delete FeedfeederItem content items which are more than three months old
        
        from StringIO import StringIO
        import DateTime
        
        buf = StringIO()
        
        # DateTime deltas are days as floating points
        end = DateTime.DateTime() - 30*3
        start = DateTime.DateTime(2000, 1,1)
        
        date_range_query = { 'query':(start,end), 'range': 'min:max'} 
                
        items = context.portal_catalog.queryCatalog({"portal_type":"FeedFeederItem",
                                             "created" : date_range_query,
                                             "sort_on" : "created"
                                            })
        
        items = list(items)
        
        print >> buf, "Found %d items to be purged" % len(items)
        
        count = 0
        for b in items:
            count += 1            
            obj = b.getObject()
            print >> buf, "Deleting:" + obj.absolute_url() + " " + str(obj.created())
            obj.aq_parent.manage_delObjects([obj.getId()])
        
        
        return buf.getvalue()
        
                