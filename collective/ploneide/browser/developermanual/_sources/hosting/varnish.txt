===================
 Varnish
===================

.. admonition:: Description

        Varnish is a caching front-end server. This document has notes how to use Varnish
        with Plone. 

.. contents :: :local:

.. highlight:: console

Introduction
------------

This page contains info for using Varnish caching proxy with Plone.

Please read first

* http://pypi.python.org/pypi/plone.recipe.varnish

* http://varnish-cache.org/

Management console
------------------

Telnet console
=================

Management console must be enabled in Varnish buildout settings.

Example::

        ssh yourhost
        telnet localhost 8088
        
.. note ::

        Port number depends on your Varnish settings.
        
varnishadm (system-wide installation)
=========================================

Ubuntu/Debian supports accessing Varnish admin through::

    varnishadm -T localhost:6082 -S /etc/varnish/secret               

Quit console
=============

Quit command::

   quit

Purging the cache
==================

This will remove all entries from Varnish cache::

   url.purge .*


Loading new VCL to live varnish daemon
----------------------------------------

More often than not it is beneficial to load new configuration without bringing the cache down for maintenance. 
Using this method also checks the new VCL for syntax errors before activating it. 
Logging in to Varnish CLI requires varnishadm tool, address of management interface and authentication secret file. 
See varnishadm man-page for details.

Opening new CLI connection to Varnish console, buildout based Varnish installation::

        parts/varnish-build/bin/varnishadm -T localhost:8088

Port 8088 is defined in ``buildout.cfg``::

        [varnish-instance]
        telnet = localhost:8088
                    
Opening new CLI connection to Varnish console, system-wide Varnish installation on Ubuntu/Debian::

    varnishadm -T localhost:6082 -S /etc/varnish/secret

You can dynamically load and parse new VCL config file to memory::

	vcl.load <name> <file>

For example::

	vcl.load newconf_1 /etc/varnish/newconf.vcl

.. or ...

        vcl.load test /srv/plone/myplonesitename/varnish.vcl
        
``vcl.load`` will load and compile the new configuration. Compilation will fail and report on syntax errors. 
Now that the new configuration has been loaded it can be activated with::

	vcl.use newconf_1 
	
.. note ::

        Varnish does not reuse <name> in vcl.load, so every time you need to reload
        your config you need to invent a new name for it.


Logs
------

To see real-time log dump (system-wide Varnish configuration)::

        varnishlog
        
By default, Varnish does not log to any file and keeps log only in memory.
If you want to extract Apache like log from varnish you need to use ``varnishncsa``
utility.
        
Stats
-----

Check live "top like" Varnish monitor::

        parts/varnish-build/bin/varnishstat
        
Use admin console to print stats for you::

        stats
        200 2114    
        
               95717  Client connections accepted
              132889  Client requests received
               38638  Cache hits
               21261  Cache hits for pass
               59565  Cache misses
               23395  Backend conn. success
                  87  Backend conn. failures
               62062  Backend conn. reuses
               17259  Backend conn. was closed
               79331  Backend conn. recycles
                  10  Fetch head
               65423  Fetch with Length
               15694  Fetch chunked
                3753  Fetch EOF
                 302  Fetch wanted close
                 355  Fetch failed
                 180  N struct sess_mem
                 227  N struct object
                 234  N struct objectcore
                 259  N struct objecthead
                 501  N struct smf
                  35  N small free smf
                  16  N large free smf
                  10  N struct vbe_conn
                  10  N worker threads
                 478  N worker threads created
                2929  N worker threads limited
                3995  N overflowed work requests
                   4  N backends
               59052  N expired objects
               36943  N LRU moved objects
              105838  Objects sent with write
               95717  Total Sessions
              132889  Total Requests
                  21  Total pipe
               25917  Total pass
               84827  Total fetch
            56847844  Total header bytes
          3212053619  Total body bytes
               54026  Session Closed
                 112  Session Pipeline
                  39  Session Read Ahead
               84400  Session Linger
               75169  Session herd
             8395856  SHM records
              953122  SHM writes
                   1  SHM flushes due to overflow
                 913  SHM MTX contention
                   4  SHM cycles through buffer
              137327  allocator requests
                 450  outstanding allocations
            10911744  bytes allocated
           257523712  bytes free
                 675  SMS allocator requests
              282210  SMS bytes allocated
              282210  SMS bytes freed
               85435  Backend requests made
                   2  N vcl total
                   2  N vcl available
                   1  N total active purges
                   1  N new purges added
              119461  HCB Lookups without lock
               38489  HCB Lookups with lock
               38489  HCB Inserts
              353868  Client uptime
                  41  Backend conn. retry
        

Varnish buildout restart snippet
--------------------------------

The following snippet will restart a varnishd instance which has
been started from *plone.recipe.varnish* buildout directly
invoking ``bin/varnish-instance`` command.

It will also create Apache compatible log file which you 
can examinen using text editing tools by running
``varnishncsa`` command which will read log data
from Varnish memory mapped file and write it to 
a text file in Apache format.


Example::

        #!/bin/sh
        # Varnish restart script
        sudo killall varnishd
        sudo bin/varnish-instance
        # Create Apache compatible log file
        sudo kill `cat var/varnishncsa.pid`
        sudo parts/varnish-build/bin/varnishncsa -D -d -a -w var/log/varnish.log -P var/varnishncsa.pid

Virtual hosting 
------------------

If you want to map Varnish backend directly to Plone-as-a-virtualhost (Zope VirtualHostMonster
is used to map site name to Plone site instance id) use req.url mutating.

The following maps Plone site id *plonecommunity* to *plonecommunity.mobi* domain.
Plone is a single Zope instance, running in port 9999.

Example:: 

	backend plonecommunity {
	        .host = "127.0.0.1";
	        .port = "9999";
	}
	
	sub vcl_recv {
	        if (req.http.host ~ "^(www.)?plonecommunity.mobi(:[0-9]+)?$"
	            || req.http.host ~ "^plonecommunity.mfabrik.com(:[0-9]+)?$") {
	
	                set req.backend = plonecommunity 
	                set req.url = "/VirtualHostBase/http/plonecommunity.mobi:80/plonecommunity/VirtualHostRoot" req.url;
	                set req.backend = plonecommunity;
	        }
	}
	

Varnish and I18N
-----------------

Please see :doc:`cache issues related to LinguaPlone </i18n/cache>`.
